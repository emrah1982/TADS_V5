# Multi-stage build for optimized image
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # OpenCV dependencies
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgoogle-perftools4 \
    # Video/Camera support
    v4l-utils \
    libv4l-dev \
    # Network tools
    curl \
    wget \
    # Build tools
    gcc \
    g++ \
    make \
    # FFmpeg for video processing
    ffmpeg \
    # Additional libs
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir torch torchvision --index-url https://download.pytorch.org/whl/cpu && \
    pip install --no-cache-dir -r requirements.txt

# Create necessary directories
RUN mkdir -p /app/logs /app/models /app/recordings /app/static /app/video_sources /app/utils

# Copy application code
COPY main.py .
COPY models/ ./models/
COPY video_sources/ ./video_sources/
COPY utils/ ./utils/
COPY static/ ./static/

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set permissions
RUN chown -R appuser:appuser /app && \
    chmod +x /app/main.py

# Switch to non-root user (commented for camera access)
# USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Start command
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]